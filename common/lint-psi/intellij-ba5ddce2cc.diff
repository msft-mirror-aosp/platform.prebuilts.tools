diff --git a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
index 4bb81ad0e048..c3df024de4b5 100644
--- a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
+++ b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/kotlinConvertParentUtils.kt
@@ -73,6 +73,7 @@ internal fun convertParentImpl(
             AnnotationUseSiteTarget.SETTER_PARAMETER ->
                 parent = (parentUnwrapped as? KtParameter)
                     ?.toLightSetter()?.parameterList?.parameters?.firstOrNull() ?: parent
+            else -> {}
         }
     }
     if ((psi is UastKotlinPsiVariable || psi is UastKotlinPsiParameter) && parent != null) {
diff --git a/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt b/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
index 622a1e811adf..df9652f6ef46 100644
--- a/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
+++ b/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/FirKotlinUastResolveProviderService.kt
@@ -7,7 +7,6 @@ import com.intellij.psi.impl.compiled.ClsMemberImpl
 import com.intellij.psi.impl.file.PsiPackageImpl
 import com.intellij.util.SmartList
 import org.jetbrains.kotlin.analysis.api.KtTypeArgumentWithVariance
-import org.jetbrains.kotlin.analysis.api.analyseForUast
 import org.jetbrains.kotlin.analysis.api.base.KtConstantValue
 import org.jetbrains.kotlin.analysis.api.calls.*
 import org.jetbrains.kotlin.analysis.api.components.KtConstantEvaluationMode
@@ -288,7 +287,9 @@ interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderSer
             else -> null
         } ?: return null

-        val resolvedTargetElement = resolvedTargetSymbol.psiForUast(ktExpression.project)
+        val resolvedTargetElement = analyseForUast(ktExpression) {
+            psiForUast(resolvedTargetSymbol, ktExpression.project)
+        }

         // Shortcut: if the resolution target is compiled class/member, package info, or pure Java declarations,
         //   we can return it early here (to avoid expensive follow-up steps: module retrieval and light element conversion).
@@ -308,6 +309,7 @@ interface FirKotlinUastResolveProviderService : BaseKotlinUastResolveProviderSer
                 // For decompiled declarations, we can try light element conversion (only).
                 (resolvedTargetElement as? KtDeclaration)?.toLightElements()?.singleOrNull()?.let { return it }
             }
+            else -> {}
         }

         fun resolveToPsiClassOrEnumEntry(classOrObject: KtClassOrObject): PsiElement? {
diff --git a/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/internal/firKotlinInternalUastUtils.kt b/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/internal/firKotlinInternalUastUtils.kt
index 7edff9766e852..cbcae28de3ba2 100644
--- a/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/internal/firKotlinInternalUastUtils.kt
+++ b/plugins/kotlin/uast/uast-kotlin-fir/src/org/jetbrains/uast/kotlin/internal/firKotlinInternalUastUtils.kt
@@ -6,6 +6,8 @@ import com.intellij.openapi.project.Project
 import com.intellij.psi.*
 import com.intellij.psi.util.PsiTypesUtil
 import org.jetbrains.kotlin.analysis.api.KtAnalysisSession
+import org.jetbrains.kotlin.analysis.api.analyze
+import org.jetbrains.kotlin.analysis.api.lifetime.KtAlwaysAccessibleLifetimeTokenFactory
 import org.jetbrains.kotlin.analysis.api.symbols.*
 import org.jetbrains.kotlin.analysis.api.types.KtClassErrorType
 import org.jetbrains.kotlin.analysis.api.types.KtNonErrorClassType
@@ -13,6 +15,7 @@ import org.jetbrains.kotlin.analysis.api.types.KtType
 import org.jetbrains.kotlin.analysis.api.types.KtTypeMappingMode
 import org.jetbrains.kotlin.analysis.project.structure.KtSourceModule
 import org.jetbrains.kotlin.analysis.project.structure.getKtModule
+import org.jetbrains.kotlin.analysis.providers.DecompiledPsiDeclarationProvider.findPsi
 import org.jetbrains.kotlin.asJava.getRepresentativeLightMethod
 import org.jetbrains.kotlin.asJava.toLightClass
 import org.jetbrains.kotlin.idea.KotlinLanguage
@@ -30,6 +32,12 @@ val firKotlinUastPlugin: FirKotlinUastLanguagePlugin by lz {
         ?: FirKotlinUastLanguagePlugin()
 }
 
+internal inline fun <R> analyseForUast(
+    useSiteKtElement: KtElement,
+    action: KtAnalysisSession.() -> R
+): R =
+    analyze(useSiteKtElement, KtAlwaysAccessibleLifetimeTokenFactory, action)
+
 internal fun KtAnalysisSession.containingKtClass(
     ktConstructorSymbol: KtConstructorSymbol,
 ): KtClass? {
@@ -54,7 +63,7 @@ internal fun KtAnalysisSession.toPsiMethod(
     functionSymbol: KtFunctionLikeSymbol,
     context: KtElement,
 ): PsiMethod? {
-    return when (val psi = functionSymbol.psiForUast(context.project)) {
+    return when (val psi = psiForUast(functionSymbol, context.project)) {
         null -> null
         is PsiMethod -> psi
         is KtClassOrObject -> {
@@ -143,11 +152,11 @@ internal fun KtAnalysisSession.nullability(ktType: KtType?): TypeNullability? {
 /**
  * Finds Java stub-based [PsiElement] for symbols that refer to declarations in [KtLibraryModule].
  */
-internal fun KtSymbol.psiForUast(project: Project): PsiElement? {
-    return when (origin) {
+internal fun KtAnalysisSession.psiForUast(symbol: KtSymbol, project: Project): PsiElement? {
+    return when (symbol.origin) {
         KtSymbolOrigin.LIBRARY -> {
-            FirPsiDeclarationProvider.findPsi(this, project) ?: psi
+            findPsi(symbol, project) ?: symbol.psi
         }
-        else -> psi
+        else -> symbol.psi
     }
 }
