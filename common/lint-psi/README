IntelliJ Core, UAST and Kotlin
------------------------------

Originally, we just downloaded snapshots of intellij-core itself from
https://www.jetbrains.com/intellij-repository/releases, like this:
https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea/intellij-core/171.4249.32/intellij-core-171.4249.32.zip

The version number here, 171.3780.107, matches the IDE used in Studio,
defined in tools/adt/idea/adt-branding/src/idea/AndroidStudioApplicationInfo.xml;
  <build number="__BUILD_NUMBER__" date="__BUILD_DATE__" apiVersion="AI-171.3780.107"/>

However, when we added Kotlin support, it turns out that the Kotlin
compiler itself includes large portions of intellij-core (though thanks
to shrinking it was sometimes only partial classes). Since we need
the Kotlin compiler, we just turn off shrinking in the compiler build
and then drop in the compiler jar (which contains all of intellij-core).


Updating
--------

First, check out a copy of the Kotlin git repository:
$ git checkout https://github.com/JetBrains/kotlin
(or to start a new branch, git checkout -t origin/master -b my-master)

Then switch to a compatible patch branch; right now that means
from master, do a
$ git merge origin/master_173

Currently:
$ git checkout 1.2.40
$ git merge origin/1.2.40_181

The specific branch versions may change. Here 1.2.30 is the current
active Kotlin stable branch, and 1.2.30_181 is the IntelliJ 181 (e.g. 2018.1)
branch that it matches (this is relevant for the UAST library which is
develope din the IntelliJ codebase, not in the Kotlin codebase.)


Then make sure to apply some extra patches to work around bugs
and to add some special methods used by lint:
$ git apply /path/to/kotlin-compiler-patch.diff (which is located in
this directory).

Next, build the Kotlin repository:
$ ./gradlew dist
$ cd plugins/uast-kotlin && gradle jar

Finally, back in this prebuilt directory, run the update.xml script,
pointing back to the Kotlin repository:
ant -f update.xml -Dkotlin_src_dir=$MY_KOTLIN_REPO_ROOT

The packaging script will extract code and update the intellij-core and uast prebuilts
in this directory. It performs a number of steps to do that, such as unbundling the
trove classes, replacing a platform icons class, etc.
