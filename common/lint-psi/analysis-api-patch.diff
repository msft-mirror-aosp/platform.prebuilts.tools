diff --git a/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt b/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
index bef504680fb2..6e6d46ac18fb 100644
--- a/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
+++ b/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
@@ -41,7 +41,6 @@ object FirStandaloneServiceRegistrar : AnalysisApiStandaloneServiceRegistrar {
     }
 
     override fun registerProjectExtensionPoints(project: MockProject) {
-        IrGenerationExtension.registerExtensionPoint(project)
         FirExtensionRegistrarAdapter.registerExtensionPoint(project)
         LLFirSessionConfigurator.registerExtensionPoint(project)
     }
@@ -70,4 +69,4 @@ object FirStandaloneServiceRegistrar : AnalysisApiStandaloneServiceRegistrar {
             registerExtension(PsiElementFinderImpl(project), disposable)
         }
     }
-}
\ No newline at end of file
+}
diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
index 48a21aa00c780..d0ff0999f07fb 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
@@ -55,7 +55,8 @@ internal fun TargetPlatform.getAnalyzerServices(): PlatformDependentAnalyzerServ
  * Such source roots are either [KotlinSourceRoot] or [JavaSourceRoot], and thus
  * this util collects all `.kt` and `.java` files under source roots.
  */
-internal fun getSourceFilePaths(
+// Expose to use at AA FE1.0
+public fun getSourceFilePaths(
     compilerConfig: CompilerConfiguration,
     includeDirectoryRoot: Boolean = false,
 ): Set<Path> {
@@ -127,7 +128,8 @@ internal fun Path.hasSuitableExtensionToAnalyse(): Boolean {
             extension == JavaFileType.DEFAULT_EXTENSION
 }

-internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
+// Expose to use at AA FE1.0
+public inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     kotlinCoreProjectEnvironment: KotlinCoreProjectEnvironment,
     paths: Collection<Path>,
 ): List<T> {
@@ -146,7 +148,8 @@ internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     }
 }

-internal fun buildKtModuleProviderByCompilerConfiguration(
+// Expose to use at AA FE1.0
+public fun buildKtModuleProviderByCompilerConfiguration(
     kotlinCoreProjectEnvironment: KotlinCoreProjectEnvironment,
     compilerConfig: CompilerConfiguration,
     ktFiles: List<KtFile>,
diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
index dc64e55bc44f9..bc8e67a0b4679 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
@@ -46,6 +46,7 @@ import kotlin.contracts.contract
 public class StandaloneAnalysisAPISessionBuilder(
     projectDisposable: Disposable,
     unitTestMode: Boolean,
+    compilerConfiguration: CompilerConfiguration = CompilerConfiguration(),
     classLoader: ClassLoader = MockProject::class.java.classLoader
 ) {
     init {
@@ -61,6 +62,7 @@ public class StandaloneAnalysisAPISessionBuilder(
         StandaloneProjectFactory.createProjectEnvironment(
             projectDisposable,
             KotlinCoreApplicationEnvironmentMode.fromUnitTestModeFlag(unitTestMode),
+            compilerConfiguration,
             classLoader = classLoader
         )

@@ -230,6 +232,7 @@ public inline fun buildStandaloneAnalysisAPISession(
     projectDisposable: Disposable = Disposer.newDisposable("StandaloneAnalysisAPISession.project"),
     unitTestMode: Boolean = false,
     withPsiDeclarationFromBinaryModuleProvider: Boolean = false,
+    compilerConfiguration: CompilerConfiguration = CompilerConfiguration(),
     classLoader: ClassLoader = MockProject::class.java.classLoader,
     init: StandaloneAnalysisAPISessionBuilder.() -> Unit,
 ): StandaloneAnalysisAPISession {
@@ -239,6 +242,7 @@ public inline fun buildStandaloneAnalysisAPISession(
     return StandaloneAnalysisAPISessionBuilder(
         projectDisposable,
         unitTestMode,
+        compilerConfiguration,
         classLoader
     ).apply(init).build(
         withPsiDeclarationFromBinaryModuleProvider,
diff --git a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt
new file mode 100644
index 00000000000..ddb42aff005
--- /dev/null
+++ b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.analysis.api.lifetime
+
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.project.Project
+import org.jetbrains.kotlin.analysis.api.KtAnalysisApiInternals
+
+@Suppress("DEPRECATION")
+@KtAnalysisApiInternals
+@Service(Service.Level.PROJECT)
+@Deprecated("Needed for binary compatibility, see KTIJ-27188")
+public class KtDefaultLifetimeTokenProvider(private val project: Project) {
+    public fun getDefaultLifetimeTokenFactory(): KtLifetimeTokenFactory {
+        return KtLifetimeTokenProvider.getService(project).getLifetimeTokenFactory()
+    }
+
+    public companion object {
+        @KtAnalysisApiInternals
+        public fun getService(project: Project): KtDefaultLifetimeTokenProvider =
+            project.getService(KtDefaultLifetimeTokenProvider::class.java)
+    }
+}
diff --git a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
index 9f82f10dceb7f..396e1ced34eed 100644
--- a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
+++ b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
@@ -35,6 +35,11 @@ public abstract class KtAnalysisSessionProvider(public val project: Project) : D
     @Suppress("LeakingThis")
     public val noWriteActionInAnalyseCallChecker: NoWriteActionInAnalyseCallChecker = NoWriteActionInAnalyseCallChecker(this)

+    @Suppress("UNUSED_PARAMETER")
+    @Deprecated("Needed for binary compatibility, see KTIJ-27188")
+    public fun getAnalysisSession(useSiteKtElement: KtElement, factory: KtLifetimeTokenFactory): KtAnalysisSession =
+        getAnalysisSession(useSiteKtElement)
+
     public abstract fun getAnalysisSession(useSiteKtElement: KtElement): KtAnalysisSession

     public abstract fun getAnalysisSessionByUseSiteKtModule(useSiteKtModule: KtModule): KtAnalysisSession
diff --git a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/parameters/SymbolLightParameterCommon.kt b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/parameters/SymbolLightParameterCommon.kt
index 9c9b3678c2738..c18903ae12b35 100644
--- a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/parameters/SymbolLightParameterCommon.kt
+++ b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/parameters/SymbolLightParameterCommon.kt
@@ -33,7 +33,7 @@ internal abstract class SymbolLightParameterCommon(
         parameterSymbolPointer = with(ktAnalysisSession) { parameterSymbol.createPointer() },
         parameterDeclaration = parameterSymbol.sourcePsiSafe(),
         containingMethod = containingMethod,
-        kotlinOrigin = parameterSymbol.psiSafe(),
+        kotlinOrigin = parameterSymbol.sourcePsiSafe(), // KT-64772
     )

     private val _name: String by lazyPub {
diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtStandaloneProjectStructureProvider.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtStandaloneProjectStructureProvider.kt
index 0e744e91d83a4..166a89592539d 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtStandaloneProjectStructureProvider.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtStandaloneProjectStructureProvider.kt
@@ -44,7 +44,8 @@ internal class KtStandaloneProjectStructureProvider(
             ?: return ktNotUnderContentRootModuleWithoutPsiFile

         val virtualFile = containingFile.virtualFile
-            ?: error("${containingFile.name} is not a physical file")
+            // KT-65107
+            ?: return ktNotUnderContentRootModuleWithoutPsiFile

         if (virtualFile.extension == BuiltInSerializerProtocol.BUILTINS_FILE_EXTENSION) {
             return builtinsModule
@@ -73,4 +74,4 @@ internal class KtStandaloneProjectStructureProvider(
             addAll(findJvmRootsForJavaFiles(files.filterIsInstance<PsiJavaFile>()))
         }
     }
-}
\ No newline at end of file
+}
diff --git a/analysis/low-level-api-fir/src/org/jetbrains/kotlin/analysis/low/level/api/fir/sessions/LLFirAbstractSessionFactory.kt b/analysis/low-level-api-fir/src/org/jetbrains/kotlin/analysis/low/level/api/fir/sessions/LLFirAbstractSessionFactory.kt
index 6917e6e67fba..6632da005d90 100644
--- a/analysis/low-level-api-fir/src/org/jetbrains/kotlin/analysis/low/level/api/fir/sessions/LLFirAbstractSessionFactory.kt
+++ b/analysis/low-level-api-fir/src/org/jetbrains/kotlin/analysis/low/level/api/fir/sessions/LLFirAbstractSessionFactory.kt
@@ -435,6 +435,8 @@ internal abstract class LLFirAbstractSessionFactory(protected val project: Proje
             register(FirLazyDeclarationResolver::class, FirDummyCompilerLazyDeclarationResolver)
             registerCommonComponents(ProjectStructureProvider.getInstance(project).libraryLanguageVersionSettings)
             registerCommonComponentsAfterExtensionsAreConfigured()
+            // KT-65788
+            registerResolveComponents()

             val kotlinScopeProvider = FirKotlinScopeProvider(::wrapScopeWithJvmMapped)
             register(FirKotlinScopeProvider::class, kotlinScopeProvider)
