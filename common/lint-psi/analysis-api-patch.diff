diff --git a/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt b/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
index bef504680fb2..6e6d46ac18fb 100644
--- a/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
+++ b/analysis/analysis-api-standalone/analysis-api-fir-standalone-base/src/org/jetbrains/kotlin/analysis/api/standalone/base/project/structure/FirStandaloneServiceRegistrar.kt
@@ -41,7 +41,6 @@ object FirStandaloneServiceRegistrar : AnalysisApiStandaloneServiceRegistrar {
     }
 
     override fun registerProjectExtensionPoints(project: MockProject) {
-        IrGenerationExtension.registerExtensionPoint(project)
         FirExtensionRegistrarAdapter.registerExtensionPoint(project)
         LLFirSessionConfigurator.registerExtensionPoint(project)
     }
@@ -70,4 +69,4 @@ object FirStandaloneServiceRegistrar : AnalysisApiStandaloneServiceRegistrar {
             registerExtension(PsiElementFinderImpl(project), disposable)
         }
     }
-}
\ No newline at end of file
+}
diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
index 4c0d25f4a100..e8dea7f4261a 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
@@ -62,7 +62,8 @@ internal fun TargetPlatform.getAnalyzerServices(): PlatformDependentAnalyzerServ
  * Such source roots are either [KotlinSourceRoot] or [JavaSourceRoot], and thus
  * this util collects all `.kt` and `.java` files under source roots.
  */
-internal fun getSourceFilePaths(
+// Expose to use at AA FE1.0
+public fun getSourceFilePaths(
     compilerConfig: CompilerConfiguration,
     includeDirectoryRoot: Boolean = false,
 ): Set<String> {
@@ -131,7 +132,8 @@ private fun collectSourceFilePaths(
     )
 }
 
-internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
+// Expose to use at AA FE1.0
+public inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     project: Project,
     paths: Collection<String>,
 ): List<T> {
@@ -150,7 +152,8 @@ internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     }
 }
 
-internal fun buildKtModuleProviderByCompilerConfiguration(
+// Expose to use at AA FE1.0
+public fun buildKtModuleProviderByCompilerConfiguration(
     compilerConfig: CompilerConfiguration,
     project: Project,
     ktFiles: List<KtFile>,
diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
index 8bb2abafb093..1f8fe89e4a18 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/api/standalone/StandaloneAnalysisAPISessionBuilder.kt
@@ -45,6 +45,7 @@ public class StandaloneAnalysisAPISessionBuilder(
     applicationDisposable: Disposable,
     projectDisposable: Disposable,
     unitTestMode: Boolean,
+    compilerConfiguration: CompilerConfiguration = CompilerConfiguration(),
     classLoader: ClassLoader = MockProject::class.java.classLoader
 ) {
     init {
@@ -61,6 +62,7 @@ public class StandaloneAnalysisAPISessionBuilder(
             projectDisposable,
             applicationDisposable,
             unitTestMode,
+            compilerConfiguration,
             classLoader = classLoader
         )

@@ -227,6 +229,7 @@ public inline fun buildStandaloneAnalysisAPISession(
     projectDisposable: Disposable = Disposer.newDisposable("StandaloneAnalysisAPISession.project"),
     unitTestMode: Boolean = false,
     withPsiDeclarationFromBinaryModuleProvider: Boolean = false,
+    compilerConfiguration: CompilerConfiguration = CompilerConfiguration(),
     classLoader: ClassLoader = MockProject::class.java.classLoader,
     init: StandaloneAnalysisAPISessionBuilder.() -> Unit
 ): StandaloneAnalysisAPISession {
@@ -237,6 +240,7 @@ public inline fun buildStandaloneAnalysisAPISession(
         applicationDisposable,
         projectDisposable,
         unitTestMode,
+        compilerConfiguration,
         classLoader
     ).apply(init).build(
         withPsiDeclarationFromBinaryModuleProvider,
diff --git a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt
new file mode 100644
index 00000000000..ddb42aff005
--- /dev/null
+++ b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/lifetime/KtDefaultLifetimeTokenProvider.kt
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
+ * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
+ */
+
+package org.jetbrains.kotlin.analysis.api.lifetime
+
+import com.intellij.openapi.components.Service
+import com.intellij.openapi.project.Project
+import org.jetbrains.kotlin.analysis.api.KtAnalysisApiInternals
+
+@Suppress("DEPRECATION")
+@KtAnalysisApiInternals
+@Service(Service.Level.PROJECT)
+@Deprecated("Needed for binary compatibility, see KTIJ-27188")
+public class KtDefaultLifetimeTokenProvider(private val project: Project) {
+    public fun getDefaultLifetimeTokenFactory(): KtLifetimeTokenFactory {
+        return KtLifetimeTokenProvider.getService(project).getLifetimeTokenFactory()
+    }
+
+    public companion object {
+        @KtAnalysisApiInternals
+        public fun getService(project: Project): KtDefaultLifetimeTokenProvider =
+            project.getService(KtDefaultLifetimeTokenProvider::class.java)
+    }
+}
diff --git a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
index b8487abe271..eb9c5191692 100644
--- a/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
+++ b/analysis/analysis-api/src/org/jetbrains/kotlin/analysis/api/session/KtAnalysisSessionProvider.kt
@@ -31,6 +31,11 @@ public abstract class KtAnalysisSessionProvider(public val project: Project) : D
 
     public abstract fun getAnalysisSession(useSiteKtElement: KtElement): KtAnalysisSession
 
+    @Suppress("UNUSED_PARAMETER")
+    @Deprecated("Needed for binary compatibility, see KTIJ-27188")
+    public fun getAnalysisSession(useSiteKtElement: KtElement, factory: KtLifetimeTokenFactory): KtAnalysisSession =
+        getAnalysisSession(useSiteKtElement)
+
     public abstract fun getAnalysisSessionByUseSiteKtModule(useSiteKtModule: KtModule): KtAnalysisSession
 
     public inline fun <R> analyseInDependedAnalysisSession(
