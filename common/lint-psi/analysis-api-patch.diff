diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
index 527966765db..16284fd6828 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
@@ -61,7 +61,8 @@ internal fun TargetPlatform.getAnalyzerServices(): PlatformDependentAnalyzerServ
  * Such source roots are either [KotlinSourceRoot] or [JavaSourceRoot], and thus
  * this util collects all `.kt` and `.java` files under source roots.
  */
-internal fun getSourceFilePaths(
+// Expose to use at AA FE1.0
+public fun getSourceFilePaths(
     compilerConfig: CompilerConfiguration,
     includeDirectoryRoot: Boolean = false,
 ): Set<String> {
@@ -127,7 +128,8 @@ private fun collectSourceFilePaths(
     )
 }

-internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
+// Expose to use at AA FE1.0
+public inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     project: Project,
     paths: Collection<String>,
 ): List<T> {
@@ -146,7 +148,8 @@ internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     }
 }

-internal fun buildKtModuleProviderByCompilerConfiguration(
+// Expose to use at AA FE1.0
+public fun buildKtModuleProviderByCompilerConfiguration(
     compilerConfig: CompilerConfiguration,
     project: Project,
     ktFiles: List<KtFile>,
diff --git a/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt b/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
index e775f370e63..ff097a85c3f 100644
--- a/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
+++ b/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
@@ -40,4 +40,32 @@ interface KtFe10ReferenceResolutionHelper {
     companion object {
         fun getInstance() = ApplicationManager.getApplication().getService(KtFe10ReferenceResolutionHelper::class.java)
     }
-}
\ No newline at end of file
+}
+
+/**
+ * A dummy implementation of [KtFe10ReferenceResolutionHelper]
+ *
+ * The implementation in IDE, [KtFe10ReferenceResolutionHelperImpl], is not always available, e.g., in Android Lint CLI.
+ */
+object DummyKtFe10ReferenceResolutionHelper : KtFe10ReferenceResolutionHelper {
+    override fun isInProjectOrLibSource(element: PsiElement, includeScriptsOutsideSourceRoots: Boolean): Boolean = false
+
+    override fun resolveImportReference(file: KtFile, fqName: FqName): Collection<DeclarationDescriptor> = emptyList()
+
+    override fun partialAnalyze(element: KtElement): BindingContext = BindingContext.EMPTY
+
+    override fun findDecompiledDeclaration(
+        project: Project,
+        referencedDescriptor: DeclarationDescriptor,
+        builtInsSearchScope: GlobalSearchScope?
+    ): KtDeclaration? = null
+
+    override fun findPsiDeclarations(
+        declaration: DeclarationDescriptor,
+        project: Project,
+        resolveScope: GlobalSearchScope
+    ): Collection<PsiElement> = emptyList()
+
+    override fun resolveKDocLink(element: KDocName): Collection<DeclarationDescriptor> = emptyList()
+}
+
diff --git a/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt b/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
index 6ce884aa80cc..d26b78da1a49 100644
--- a/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
+++ b/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
@@ -239,10 +239,12 @@ public class KotlinStaticDeclarationProviderFactory(
             }
         }

-        loadBuiltIns().forEach { ktFileStub ->
-            addToFacadeFileMap(ktFileStub.psi)
-            // top-level functions and properties, built-in classes
-            ktFileStub.childrenStubs.forEach(::indexStub)
+        if (System.getProperty("lint.use.fir.uast", "false").toBoolean()) {
+            loadBuiltIns().forEach { ktFileStub ->
+                addToFacadeFileMap(ktFileStub.psi)
+                // top-level functions and properties, built-in classes
+                ktFileStub.childrenStubs.forEach(::indexStub)
+            }
         }

         // Indexing user source files
