diff --git a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
index 527966765db..16284fd6828 100644
--- a/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
+++ b/analysis/analysis-api-standalone/src/org/jetbrains/kotlin/analysis/project/structure/impl/KtModuleUtils.kt
@@ -61,7 +61,8 @@ internal fun TargetPlatform.getAnalyzerServices(): PlatformDependentAnalyzerServ
  * Such source roots are either [KotlinSourceRoot] or [JavaSourceRoot], and thus
  * this util collects all `.kt` and `.java` files under source roots.
  */
-internal fun getSourceFilePaths(
+// Expose to use at AA FE1.0
+public fun getSourceFilePaths(
     compilerConfig: CompilerConfiguration,
     includeDirectoryRoot: Boolean = false,
 ): Set<String> {
@@ -127,7 +128,8 @@ private fun collectSourceFilePaths(
     )
 }

-internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
+// Expose to use at AA FE1.0
+public inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     project: Project,
     paths: Collection<String>,
 ): List<T> {
@@ -146,7 +148,8 @@ internal inline fun <reified T : PsiFileSystemItem> getPsiFilesFromPaths(
     }
 }

-internal fun buildKtModuleProviderByCompilerConfiguration(
+// Expose to use at AA FE1.0
+public fun buildKtModuleProviderByCompilerConfiguration(
     compilerConfig: CompilerConfiguration,
     project: Project,
     ktFiles: List<KtFile>,
diff --git a/analysis/analysis-api-fe10/src/org/jetbrains/kotlin/analysis/api/descriptors/symbols/descriptorBased/base/Kt1DescUtils.kt b/analysis/analysis-api-fe10/src/org/jetbrains/kotlin/analysis/api/descriptors/symbols/descriptorBased/base/Kt1DescUtils.kt
index 318871043e2..889b3937b86 100644
--- a/analysis/analysis-api-fe10/src/org/jetbrains/kotlin/analysis/api/descriptors/symbols/descriptorBased/base/Kt1DescUtils.kt
+++ b/analysis/analysis-api-fe10/src/org/jetbrains/kotlin/analysis/api/descriptors/symbols/descriptorBased/base/Kt1DescUtils.kt
@@ -218,7 +218,12 @@ private fun KotlinType.hasReferenceOtherThan(allowedTypeParameterDescriptors: Se
             declarationDescriptor !in allowedTypeParameterDescriptors ||
                     declarationDescriptor.upperBounds.any { it.hasReferenceOtherThan(allowedTypeParameterDescriptors) }
         }
-        else -> arguments.any { it.type.hasReferenceOtherThan(allowedTypeParameterDescriptors) }
+        else -> arguments.any { typeProjection ->
+            // A star projection type (lazily) built by type parameter will be yet another type with a star projection,
+            // resulting in stack overflow if we keep checking allowed type parameter descriptors
+            !typeProjection.isStarProjection &&
+                    typeProjection.type.hasReferenceOtherThan(allowedTypeParameterDescriptors)
+        }
     }
 }

diff --git a/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt b/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
index e775f370e63..ff097a85c3f 100644
--- a/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
+++ b/analysis/kt-references/kt-references-fe10/src/org/jetbrains/kotlin/references/fe10/base/KtFe10ReferenceResolutionHelper.kt
@@ -40,4 +40,32 @@ interface KtFe10ReferenceResolutionHelper {
     companion object {
         fun getInstance() = ApplicationManager.getApplication().getService(KtFe10ReferenceResolutionHelper::class.java)
     }
-}
\ No newline at end of file
+}
+
+/**
+ * A dummy implementation of [KtFe10ReferenceResolutionHelper]
+ *
+ * The implementation in IDE, [KtFe10ReferenceResolutionHelperImpl], is not always available, e.g., in Android Lint CLI.
+ */
+object DummyKtFe10ReferenceResolutionHelper : KtFe10ReferenceResolutionHelper {
+    override fun isInProjectOrLibSource(element: PsiElement, includeScriptsOutsideSourceRoots: Boolean): Boolean = false
+
+    override fun resolveImportReference(file: KtFile, fqName: FqName): Collection<DeclarationDescriptor> = emptyList()
+
+    override fun partialAnalyze(element: KtElement): BindingContext = BindingContext.EMPTY
+
+    override fun findDecompiledDeclaration(
+        project: Project,
+        referencedDescriptor: DeclarationDescriptor,
+        builtInsSearchScope: GlobalSearchScope?
+    ): KtDeclaration? = null
+
+    override fun findPsiDeclarations(
+        declaration: DeclarationDescriptor,
+        project: Project,
+        resolveScope: GlobalSearchScope
+    ): Collection<PsiElement> = emptyList()
+
+    override fun resolveKDocLink(element: KDocName): Collection<DeclarationDescriptor> = emptyList()
+}
+

diff --git a/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt b/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
index 32fee2e3cd5..745e70d58a8 100644
--- a/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
+++ b/analysis/analysis-api-providers/src/org/jetbrains/kotlin/analysis/providers/impl/KotlinStaticDeclarationProvider.kt
@@ -6,20 +6,22 @@
 package org.jetbrains.kotlin.analysis.providers.impl

 import com.intellij.openapi.project.Project
+import com.intellij.openapi.vfs.VirtualFile
 import com.intellij.openapi.vfs.impl.jar.CoreJarFileSystem
 import com.intellij.psi.*
 import com.intellij.psi.search.GlobalSearchScope
+import com.intellij.psi.stubs.StubElement
 import com.intellij.util.indexing.FileContent
 import com.intellij.util.indexing.FileContentImpl
 import com.intellij.util.io.URLUtil
 import org.jetbrains.kotlin.analysis.decompiler.psi.KotlinBuiltInDecompiler
-import org.jetbrains.kotlin.analysis.decompiler.psi.KotlinDecompiledFileViewProvider
-import org.jetbrains.kotlin.analysis.decompiler.psi.file.KtDecompiledFile
 import org.jetbrains.kotlin.analysis.providers.KotlinDeclarationProvider
 import org.jetbrains.kotlin.analysis.providers.KotlinDeclarationProviderFactory
 import org.jetbrains.kotlin.fileClasses.javaFileFacadeFqName
+import org.jetbrains.kotlin.idea.KotlinLanguage
 import org.jetbrains.kotlin.name.*
 import org.jetbrains.kotlin.psi.*
+import org.jetbrains.kotlin.psi.stubs.impl.*
 import org.jetbrains.kotlin.serialization.deserialization.builtins.BuiltInSerializerProtocol

 public class KotlinStaticDeclarationIndex {
@@ -110,7 +112,7 @@ public class KotlinStaticDeclarationProviderFactory(
     private val psiManager = PsiManager.getInstance(project)
     private val builtInDecompiler = KotlinBuiltInDecompiler()

-    private fun loadBuiltIns(): Collection<KtDecompiledFile> {
+    private fun loadBuiltIns(): Collection<KotlinFileStubImpl> {
         val classLoader = this::class.java.classLoader
         return buildList {
             StandardClassIds.builtInsPackages.forEach { builtInPackageFqName ->
@@ -124,7 +126,7 @@ public class KotlinStaticDeclarationProviderFactory(
                         val pathToQuery = jarPath + URLUtil.JAR_SEPARATOR + builtInFile
                         jarFileSystem.findFileByPath(pathToQuery)?.let { vf ->
                             val fileContent = FileContentImpl.createByFile(vf, project)
-                            createKtFileStub(fileContent)?.let { file -> add(file) }
+                            createKtFileStub(psiManager, builtInDecompiler, fileContent)?.let { file -> add(file) }
                         }
                     }
                 }
@@ -133,18 +135,25 @@ public class KotlinStaticDeclarationProviderFactory(
     }

     private fun createKtFileStub(
+        psiManager: PsiManager,
+        builtInDecompiler: KotlinBuiltInDecompiler,
         fileContent: FileContent,
-    ): KtDecompiledFile? {
-        val fileViewProvider =
-            builtInDecompiler.createFileViewProvider(fileContent.file, psiManager, physical = true) as? KotlinDecompiledFileViewProvider
-                ?: return null
-        return builtInDecompiler.readFile(fileContent.content, fileContent.file)?.let { fileWithMetadata ->
-            KtDecompiledFile(fileViewProvider) {
-                builtInDecompiler.buildDecompiledText(fileWithMetadata)
-            }
+    ): KotlinFileStubImpl? {
+        val ktFileStub = builtInDecompiler.stubBuilder.buildFileStub(fileContent) as? KotlinFileStubImpl ?: return null
+        val fakeFile = object : KtFile(KtClassFileViewProvider(psiManager, fileContent.file), isCompiled = true) {
+            override fun getStub() = ktFileStub
+
+            override fun isPhysical() = false
         }
+        ktFileStub.psi = fakeFile
+        return ktFileStub
     }

+    private class KtClassFileViewProvider(
+        psiManager: PsiManager,
+        virtualFile: VirtualFile,
+    ) : SingleRootFileViewProvider(psiManager, virtualFile, true, KotlinLanguage.INSTANCE)
+
     private inner class KtDeclarationRecorder : KtVisitorVoid() {

         override fun visitElement(element: PsiElement) {
@@ -220,8 +229,25 @@ public class KotlinStaticDeclarationProviderFactory(
         val recorder = KtDeclarationRecorder()

         // Indexing built-ins
-        loadBuiltIns().forEach {
-            it.accept(recorder)
+        fun indexStub(stub: StubElement<*>) {
+            when (stub) {
+                is KotlinClassStubImpl -> {
+                    addToClassMap(stub.psi)
+                    // member functions and properties
+                    stub.childrenStubs.forEach(::indexStub)
+                }
+                is KotlinTypeAliasStubImpl -> addToTypeAliasMap(stub.psi)
+                is KotlinFunctionStubImpl -> addToFunctionMap(stub.psi)
+                is KotlinPropertyStubImpl -> addToPropertyMap(stub.psi)
+            }
+        }
+
+        if (System.getProperty("lint.use.fir.uast", "false").toBoolean()) {
+            loadBuiltIns().forEach { ktFileStub ->
+                addToFacadeFileMap(ktFileStub.psi)
+                // top-level functions and properties, built-in classes
+                ktFileStub.childrenStubs.forEach(::indexStub)
+            }
         }

         // Indexing user source files

