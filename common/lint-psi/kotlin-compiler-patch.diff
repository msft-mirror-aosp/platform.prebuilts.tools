diff --git a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
index 81343606c17..61074d15f58 100644
--- a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
+++ b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
@@ -502,7 +502,8 @@ class KotlinCoreEnvironment private constructor(
             }
         }
 
-        private fun createApplicationEnvironment(
+        // made public for Android Lint
+        fun createApplicationEnvironment(
             parentDisposable: Disposable, configuration: CompilerConfiguration, unitTestMode: Boolean
         ): KotlinCoreApplicationEnvironment {
             val applicationEnvironment = KotlinCoreApplicationEnvironment.create(parentDisposable, unitTestMode)
@@ -595,7 +596,8 @@ class KotlinCoreEnvironment private constructor(
             CandidateInterceptor.registerExtensionPoint(project)
         }
 
-        internal fun registerExtensionsFromPlugins(project: MockProject, configuration: CompilerConfiguration) {
+        // made public for Android Lint
+        fun registerExtensionsFromPlugins(project: MockProject, configuration: CompilerConfiguration) {
             val messageCollector = configuration.get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)
             for (registrar in configuration.getList(ComponentRegistrar.PLUGIN_COMPONENT_REGISTRARS)) {
                 try {
@@ -661,7 +663,8 @@ class KotlinCoreEnvironment private constructor(
             }
         }
 
-        private fun registerProjectServicesForCLI(@Suppress("UNUSED_PARAMETER") projectEnvironment: JavaCoreProjectEnvironment) {
+        // made public for Android Lint
+        fun registerProjectServicesForCLI(@Suppress("UNUSED_PARAMETER") projectEnvironment: JavaCoreProjectEnvironment) {
             /**
              * Note that Kapt may restart code analysis process, and CLI services should be aware of that.
              * Use PsiManager.getModificationTracker() to ensure that all the data you cached is still valid.
diff --git a/gradle/versions.properties b/gradle/versions.properties
index c4fc46a75df..8c8d0499861 100644
--- a/gradle/versions.properties
+++ b/gradle/versions.properties
@@ -1,4 +1,5 @@
-versions.intellijSdk=193.5233.102
+versions.intellijSdk=193.6015-EAP-CANDIDATE-SNAPSHOT
 versions.androidBuildTools=r23.0.1
 versions.idea.NodeJS=181.3494.12
 versions.jar.asm-all=7.0.1
diff --git a/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt b/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
index 5f03a513dc4..1ccf4de2081 100644
--- a/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
+++ b/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
@@ -145,7 +145,22 @@ abstract class KotlinAbstractUElement(private val givenParent: UElement?) : Kotl
             return false
         }
 
-        return this.psi == other.psi
+        if (this.psi == other.psi) {
+            if (this.psi == null) {
+                // Two UElements can be different but both have null PSI fields; in that case,
+                // do a deeper check
+                if (this === other) { // same instance: always equal
+                    return true
+                }
+                if (this.javaClass !== other.javaClass) { // different types: never equal
+                    return false
+                }
+                return this.asSourceString() == other.asSourceString() // source code equality
+            }
+            return true
+        } else {
+            return false
+        }
     }
 
     override fun hashCode() = psi?.hashCode() ?: 0
