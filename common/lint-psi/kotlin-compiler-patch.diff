diff --git a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
index c808c727b080..925721f0b31c 100644
--- a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
+++ b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
@@ -41,6 +41,7 @@ import org.jetbrains.kotlin.name.FqName
 import org.jetbrains.kotlin.resolve.jvm.KotlinCliJavaFileManager
 import org.jetbrains.kotlin.util.PerformanceCounter
 import org.jetbrains.kotlin.utils.addIfNotNull
+import org.jetbrains.kotlin.utils.getOrPutNullable
 
 // TODO: do not inherit from CoreJavaFileManager to avoid accidental usage of its methods which do not use caches/indices
 // Currently, the only relevant usage of this class as CoreJavaFileManager is at CoreJavaDirectoryService.getPackage,
@@ -73,7 +74,8 @@ class KotlinCliJavaFileManagerImpl(private val myPsiManager: PsiManager) : CoreJ
     private fun findVirtualFileForTopLevelClass(classId: ClassId, searchScope: GlobalSearchScope): VirtualFile? {
         val relativeClassName = classId.relativeClassName.asString()
         val outerMostClassFqName = classId.packageFqName.child(classId.relativeClassName.pathSegments().first())
-        return topLevelClassesCache.getOrPut(outerMostClassFqName) {
+        // KT-35614: getOrPut -> getOrPutNullable
+        return topLevelClassesCache.getOrPutNullable(outerMostClassFqName) {
             // Search java sources first. For build tools, it makes sense to build new files passing all the
             // class files for the previous build on the class path.
             //
diff --git a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
index f3d4b631f3c7..ea9cbe45c250 100644
--- a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
+++ b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
@@ -382,7 +382,9 @@ class KotlinCoreEnvironment private constructor(
             is JvmModulePathRoot ->
                 if (root.file.isFile) findJarRoot(root.file) else findExistingRoot(root, "Java module root")
             is JavaSourceRoot ->
-                findExistingRoot(root, "Java source root")
+                // Partial cherry pick of https://github.com/JetBrains/kotlin/pull/3649 supporting .srcjar roots.
+                if (root.file.isFile && root.file.path.endsWith(".srcjar")) findJarRoot(root.file)
+                else findExistingRoot(root, "Java source root")
             is VirtualJvmClasspathRoot -> root.file
             else ->
                 throw IllegalStateException("Unexpected root: $root")
@@ -665,7 +671,6 @@ class KotlinCoreEnvironment private constructor(
             CollectAdditionalSourcesExtension.registerExtensionPoint(project)
             ProcessSourcesBeforeCompilingExtension.registerExtensionPoint(project)
             ExtraImportsProviderExtension.registerExtensionPoint(project)
-            IrGenerationExtension.registerExtensionPoint(project)
             ScriptEvaluationExtension.registerExtensionPoint(project)
             ShellExtension.registerExtensionPoint(project)
             TypeResolutionInterceptor.registerExtensionPoint(project)
diff --git a/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts b/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
index 6b14ece06fa0..65258f7bdbe0 100644
--- a/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
+++ b/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
@@ -8,7 +8,10 @@ val excludedCompilerModules = listOf(
     ":compiler:cli",
     ":compiler:cli-js",
     ":compiler:javac-wrapper",
-    ":compiler:incremental-compilation-impl"
+    ":compiler:incremental-compilation-impl",
+    ":compiler:backend.js",
+    ":compiler:backend.wasm",
+    ":js:js.dce",
 )

 val projects = fe10CompilerModules.asList() - excludedCompilerModules + listOf(":analysis:kt-references:kt-references-fe10")

diff --git a/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts b/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
index 0574c7bcf195..5dcb381b998c 100644
--- a/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
+++ b/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
@@ -4,4 +4,15 @@ plugins {

 val irCompilerModules: Array<String> by rootProject.extra

-publishJarsForIde(irCompilerModules.asList())
+val excludeModules = listOf(
+    ":compiler:ir.backend.common",
+    ":compiler:ir.interpreter",
+    ":compiler:ir.serialization.js",
+    ":compiler:ir.serialization.jvm",
+    ":compiler:backend.js",
+    ":compiler:backend.jvm",
+    ":compiler:backend.wasm",
+    ":wasm:wasm.ir",
+)
+
+publishJarsForIde(irCompilerModules.asList() - excludeModules)

