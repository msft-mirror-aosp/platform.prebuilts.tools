diff --git a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
index c808c727b080..925721f0b31c 100644
--- a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
+++ b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCliJavaFileManagerImpl.kt
@@ -41,6 +41,7 @@ import org.jetbrains.kotlin.name.FqName
 import org.jetbrains.kotlin.resolve.jvm.KotlinCliJavaFileManager
 import org.jetbrains.kotlin.util.PerformanceCounter
 import org.jetbrains.kotlin.utils.addIfNotNull
+import org.jetbrains.kotlin.utils.getOrPutNullable
 
 // TODO: do not inherit from CoreJavaFileManager to avoid accidental usage of its methods which do not use caches/indices
 // Currently, the only relevant usage of this class as CoreJavaFileManager is at CoreJavaDirectoryService.getPackage,
@@ -73,7 +74,8 @@ class KotlinCliJavaFileManagerImpl(private val myPsiManager: PsiManager) : CoreJ
     private fun findVirtualFileForTopLevelClass(classId: ClassId, searchScope: GlobalSearchScope): VirtualFile? {
         val relativeClassName = classId.relativeClassName.asString()
         val outerMostClassFqName = classId.packageFqName.child(classId.relativeClassName.pathSegments().first())
-        return topLevelClassesCache.getOrPut(outerMostClassFqName) {
+        // KT-35614: getOrPut -> getOrPutNullable
+        return topLevelClassesCache.getOrPutNullable(outerMostClassFqName) {
             // Search java sources first. For build tools, it makes sense to build new files passing all the
             // class files for the previous build on the class path.
             //
diff --git a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
index 20a1d0927b3a0..38d0ff68f5b75 100644
--- a/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
+++ b/compiler/cli/cli-base/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
@@ -716,7 +716,6 @@ class KotlinCoreEnvironment private constructor(
             CollectAdditionalSourcesExtension.registerExtensionPoint(project)
             ProcessSourcesBeforeCompilingExtension.registerExtensionPoint(project)
             ExtraImportsProviderExtension.registerExtensionPoint(project)
-            IrGenerationExtension.registerExtensionPoint(project)
             ScriptEvaluationExtension.registerExtensionPoint(project)
             ShellExtension.registerExtensionPoint(project)
             TypeResolutionInterceptor.registerExtensionPoint(project)
diff --git a/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts b/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
index 6b14ece06fa0..65258f7bdbe0 100644
--- a/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
+++ b/prepare/ide-plugin-dependencies/kotlin-compiler-fe10-for-ide/build.gradle.kts
@@ -8,7 +8,10 @@ val excludedCompilerModules = listOf(
     ":compiler:cli",
     ":compiler:cli-js",
     ":compiler:javac-wrapper",
-    ":compiler:incremental-compilation-impl"
+    ":compiler:incremental-compilation-impl",
+    ":compiler:backend.js",
+    ":compiler:backend.wasm",
+    ":js:js.dce",
 )

 val projects = fe10CompilerModules.asList() - excludedCompilerModules + listOf(":analysis:kt-references:kt-references-fe10")

diff --git a/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts b/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
index 0574c7bcf195..5dcb381b998c 100644
--- a/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
+++ b/prepare/ide-plugin-dependencies/kotlin-compiler-ir-for-ide/build.gradle.kts
@@ -4,4 +4,15 @@ plugins {

 val irCompilerModulesForIDE: Array<String> by rootProject.extra

-publishJarsForIde(irCompilerModulesForIDE.asList())
+val excludeModules = listOf(
+    ":compiler:ir.backend.common",
+    ":compiler:ir.interpreter",
+    ":compiler:ir.serialization.js",
+    ":compiler:ir.serialization.jvm",
+    ":compiler:backend.js",
+    ":compiler:backend.jvm",
+    ":compiler:backend.wasm",
+    ":wasm:wasm.ir",
+)
+
+publishJarsForIde(irCompilerModulesForIDE.asList() - excludeModules)
diff --git a/gradle.properties b/gradle.properties
index 4c194c5968d79..1005c672674b0 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -26,8 +26,8 @@ systemProp.org.gradle.internal.http.connectionTimeout=90000
 systemProp.org.gradle.internal.http.socketTimeout=90000
 
 cacheRedirectorEnabled=true
-defaultSnapshotVersion=2.0.255-SNAPSHOT
-kotlinLanguageVersion=2.0
+defaultSnapshotVersion=1.9.255-SNAPSHOT
+kotlinLanguageVersion=1.9
 
 # Should be less or equal to the Kotlin stdlib version used inside IntelliJ IDEA repository, see KT-62510.
 # IntelliJ IDEA Kotlin stdlib version can be found at https://github.com/JetBrains/intellij-community/blob/master/.idea/libraries/kotlin_stdlib.xml
diff --git a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/firFindMainClass.kt b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/firFindMainClass.kt
index adbf9170f4389..ec3076816bb57 100644
--- a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/firFindMainClass.kt
+++ b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/firFindMainClass.kt
@@ -54,6 +54,7 @@ fun findMainClass(fir: List<FirFile>): FqName? {
     }
 }
 
+@Suppress("PARAMETER_NAME_CHANGED_ON_OVERRIDE")
 private class FirMainClassFinder(
     private var groupedMainFunctions: MutableMap<FirDeclaration, MutableList<FirSimpleFunction>>
 ) : FirVisitor<Unit, Pair<FirDeclaration, FirRegularClass?>>() {
