diff --git a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
index 5d8c666ef95..ecdad05364b 100644
--- a/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
+++ b/compiler/cli/src/org/jetbrains/kotlin/cli/jvm/compiler/KotlinCoreEnvironment.kt
@@ -25,6 +25,7 @@ import com.intellij.ide.highlighter.JavaFileType
 import com.intellij.ide.plugins.PluginManagerCore
 import com.intellij.lang.MetaLanguage
 import com.intellij.lang.java.JavaParserDefinition
+import com.intellij.mock.MockProject
 import com.intellij.openapi.Disposable
 import com.intellij.openapi.application.TransactionGuard
 import com.intellij.openapi.application.TransactionGuardImpl
@@ -137,23 +138,10 @@ class KotlinCoreEnvironment private constructor(
                         ServiceManager.getService(this, JavaFileManager::class.java) as CoreJavaFileManager
                     )
 
-                    val traceHolder = CliTraceHolder()
-                    val cliLightClassGenerationSupport = CliLightClassGenerationSupport(traceHolder)
-                    val kotlinAsJavaSupport = CliKotlinAsJavaSupport(this, traceHolder)
-                    registerService(LightClassGenerationSupport::class.java, cliLightClassGenerationSupport)
-                    registerService(CliLightClassGenerationSupport::class.java, cliLightClassGenerationSupport)
-                    registerService(KotlinAsJavaSupport::class.java, kotlinAsJavaSupport)
-                    registerService(CodeAnalyzerInitializer::class.java, traceHolder)
+                    registerKotlinLightClassSupport(project)
 
                     registerService(ExternalAnnotationsManager::class.java, MockExternalAnnotationsManager())
                     registerService(InferredAnnotationsManager::class.java, MockInferredAnnotationsManager())
-
-                    val area = Extensions.getArea(this)
-
-                    area.getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(JavaElementFinder(this, kotlinAsJavaSupport))
-                    area.getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(
-                        PsiElementFinderImpl(this, ServiceManager.getService(this, JavaFileManager::class.java))
-                    )
                 }
 
                 super.registerJavaPsiFacade()
@@ -176,17 +164,8 @@ class KotlinCoreEnvironment private constructor(
 
         val project = projectEnvironment.project
 
-        ExpressionCodegenExtension.registerExtensionPoint(project)
-        SyntheticResolveExtension.registerExtensionPoint(project)
-        ClassBuilderInterceptorExtension.registerExtensionPoint(project)
-        AnalysisHandlerExtension.registerExtensionPoint(project)
-        PackageFragmentProviderExtension.registerExtensionPoint(project)
-        StorageComponentContainerContributor.registerExtensionPoint(project)
-        DeclarationAttributeAltererExtension.registerExtensionPoint(project)
-        PreprocessedVirtualFileFactoryExtension.registerExtensionPoint(project)
-        JsSyntheticTranslateExtension.registerExtensionPoint(project)
-        CompilerConfigurationExtension.registerExtensionPoint(project)
-        IrGenerationExtension.registerExtensionPoint(project)
+        registerPluginExtensionPoints(project)
+
 
         val messageCollector = configuration.get(CLIConfigurationKeys.MESSAGE_COLLECTOR_KEY)
 
@@ -638,6 +617,28 @@ class KotlinCoreEnvironment private constructor(
             applicationEnvironment.registerParserDefinition(JavaParserDefinition())
         }
 
+        // made public for Android Lint
+        @JvmStatic
+        fun registerKotlinLightClassSupport(project: MockProject) {
+            with (project) {
+                val traceHolder = CliTraceHolder()
+                val cliLightClassGenerationSupport = CliLightClassGenerationSupport(traceHolder)
+                val kotlinAsJavaSupport = CliKotlinAsJavaSupport(this, traceHolder)
+                registerService(LightClassGenerationSupport::class.java, cliLightClassGenerationSupport)
+                registerService(CliLightClassGenerationSupport::class.java, cliLightClassGenerationSupport)
+                registerService(KotlinAsJavaSupport::class.java, kotlinAsJavaSupport)
+                registerService(CodeAnalyzerInitializer::class.java, traceHolder)
+
+                val area = Extensions.getArea(this)
+
+                area.getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(JavaElementFinder(this, kotlinAsJavaSupport))
+                area.getExtensionPoint(PsiElementFinder.EP_NAME).registerExtension(
+                   PsiElementFinderImpl(this, ServiceManager.getService(this, JavaFileManager::class.java))
+                )
+            }
+        }
+
+
         // made public for Upsource
         @Suppress("MemberVisibilityCanBePrivate")
         @JvmStatic
@@ -652,7 +653,8 @@ class KotlinCoreEnvironment private constructor(
             }
         }
 
-        private fun registerProjectExtensionPoints(area: ExtensionsArea) {
+        @JvmStatic
+        fun registerProjectExtensionPoints(area: ExtensionsArea) {
             CoreApplicationEnvironment.registerExtensionPoint(
                 area, PsiTreeChangePreprocessor.EP_NAME, PsiTreeChangePreprocessor::class.java
             )
@@ -664,12 +666,18 @@ class KotlinCoreEnvironment private constructor(
         // made public for Upsource
         @JvmStatic
         fun registerProjectServices(projectEnvironment: JavaCoreProjectEnvironment, messageCollector: MessageCollector?) {
-            with(projectEnvironment.project) {
+            registerProjectServices(projectEnvironment.project, messageCollector)
+        }
+
+        // made public for Android Lint
+        @JvmStatic
+        fun registerProjectServices(project: MockProject, messageCollector: MessageCollector?) {
+            with (project) {
                 val scriptDefinitionProvider = CliScriptDefinitionProvider()
                 registerService(ScriptDefinitionProvider::class.java, scriptDefinitionProvider)
                 registerService(
                     ScriptDependenciesProvider::class.java,
-                    CliScriptDependenciesProvider(projectEnvironment.project)
+                    CliScriptDependenciesProvider(project)
                 )
                 registerService(KotlinJavaPsiFacade::class.java, KotlinJavaPsiFacade(this))
                 registerService(KtLightClassForFacade.FacadeStubCache::class.java, KtLightClassForFacade.FacadeStubCache(this))
@@ -680,6 +688,22 @@ class KotlinCoreEnvironment private constructor(
             }
         }
 
+        @JvmStatic
+        @Suppress("MemberVisibilityCanPrivate") // made public for CLI Android Lint
+        fun registerPluginExtensionPoints(project: MockProject) {
+            ExpressionCodegenExtension.registerExtensionPoint(project)
+            SyntheticResolveExtension.registerExtensionPoint(project)
+            ClassBuilderInterceptorExtension.registerExtensionPoint(project)
+            AnalysisHandlerExtension.registerExtensionPoint(project)
+            PackageFragmentProviderExtension.registerExtensionPoint(project)
+            StorageComponentContainerContributor.registerExtensionPoint(project)
+            DeclarationAttributeAltererExtension.registerExtensionPoint(project)
+            PreprocessedVirtualFileFactoryExtension.registerExtensionPoint(project)
+            JsSyntheticTranslateExtension.registerExtensionPoint(project)
+            CompilerConfigurationExtension.registerExtensionPoint(project)
+            IrGenerationExtension.registerExtensionPoint(project)
+        }
+
         private fun registerProjectServicesForCLI(@Suppress("UNUSED_PARAMETER") projectEnvironment: JavaCoreProjectEnvironment) {
             /**
              * Note that Kapt may restart code analysis process, and CLI services should be aware of that.
diff --git a/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt b/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
index 392872e9ce3..2d9c4092932 100644
--- a/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
+++ b/plugins/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinAbstractUElement.kt
@@ -121,7 +121,23 @@ abstract class KotlinAbstractUElement(private val givenParent: UElement?) : Kotl
             return false
         }
 
-        return this.psi == other.psi
+        if (this.psi == other.psi) {
+            if (this.psi == null) {
+                // Two UElements can be different but both have null PSI fields; in that case,
+                // do a deeper check
+                if (this === other) { // same instance: always equal
+                    return true
+                }
+                if (this.javaClass !== other.javaClass) { // different types: never equal
+                    return false
+                }
+                return this.asSourceString() == other.asSourceString() // source code equality
+            }
+            return true
+        } else {
+            return false
+        }
+
     }
 
     override fun hashCode() = psi?.hashCode() ?: 0
