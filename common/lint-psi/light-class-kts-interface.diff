diff --git a/analysis/light-classes-base/src/org/jetbrains/kotlin/asJava/classes/KtLightClassForScript.kt b/analysis/light-classes-base/src/org/jetbrains/kotlin/asJava/classes/KtLightClassForScript.kt
index 60dda7baaaeb..69ec2a09c6a4 100644
--- a/analysis/light-classes-base/src/org/jetbrains/kotlin/asJava/classes/KtLightClassForScript.kt
+++ b/analysis/light-classes-base/src/org/jetbrains/kotlin/asJava/classes/KtLightClassForScript.kt
@@ -19,7 +19,19 @@ import org.jetbrains.kotlin.psi.KtClassOrObject
 import org.jetbrains.kotlin.psi.KtScript
 import javax.swing.Icon
 
-abstract class KtLightClassForScript(val script: KtScript) : KtLightClassBase(script.manager) {
+interface KtLightClassForScript : KtLightClass {
+    val script: KtScript
+
+    override val kotlinOrigin: KtClassOrObject?
+        get() = null
+
+    override val originKind: LightClassOriginKind
+        get() = LightClassOriginKind.SOURCE
+}
+
+abstract class KtLightClassForScriptBase(
+  override val script: KtScript
+) : KtLightClassForScript,KtLightClassBase(script.manager) {
     private val modifierList: PsiModifierList = LightModifierList(
         manager,
         KotlinLanguage.INSTANCE,
@@ -42,8 +54,6 @@ abstract class KtLightClassForScript(val script: KtScript) : KtLightClassBase(sc
         )
     }
 
-    override val kotlinOrigin: KtClassOrObject? get() = null
-
     val fqName: FqName get() = script.fqName
 
     override fun getModifierList() = modifierList
@@ -92,13 +102,11 @@ abstract class KtLightClassForScript(val script: KtScript) : KtLightClassBase(sc
 
     override fun isEquivalentTo(another: PsiElement?): Boolean =
         equals(another) ||
-                (another is KtLightClassForScript && fqName == another.fqName)
+                (another is KtLightClassForScriptBase && fqName == another.fqName)
 
     override fun getElementIcon(flags: Int): Icon? =
         throw UnsupportedOperationException("This should be done by KotlinIconProvider")
 
-    override val originKind: LightClassOriginKind get() = LightClassOriginKind.SOURCE
-
     override fun getLBrace(): PsiElement? = null
 
     override fun getRBrace(): PsiElement? = null
diff --git a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/classes/SymbolLightClassForScript.kt b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/classes/SymbolLightClassForScript.kt
index f479b0fe73fd..72adeb05a981 100644
--- a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/classes/SymbolLightClassForScript.kt
+++ b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/light/classes/symbol/classes/SymbolLightClassForScript.kt
@@ -20,15 +20,13 @@ import org.jetbrains.kotlin.light.classes.symbol.methods.SymbolLightMethodForScr
 import org.jetbrains.kotlin.light.classes.symbol.modifierLists.InitializedModifiersBox
 import org.jetbrains.kotlin.light.classes.symbol.modifierLists.SymbolLightClassModifierList
 import org.jetbrains.kotlin.light.classes.symbol.withSymbol
-import org.jetbrains.kotlin.load.java.structure.LightClassOriginKind
-import org.jetbrains.kotlin.psi.KtClassOrObject
 import org.jetbrains.kotlin.psi.KtScript
 
 internal class SymbolLightClassForScript private constructor(
-    private val script: KtScript,
+    override val script: KtScript,
     private val symbolPointer: KtSymbolPointer<KtScriptSymbol>,
     ktModule: KtModule,
-) : SymbolLightClassBase(ktModule, script.manager) {
+) : KtLightClassForScript, SymbolLightClassBase(ktModule, script.manager) {
 
     internal constructor(
         script: KtScript,
@@ -173,8 +171,4 @@ internal class SymbolLightClassForScript private constructor(
     override fun getScope(): PsiElement = parent
 
     override fun isInheritorDeep(baseClass: PsiClass?, classToByPass: PsiClass?): Boolean = false
-
-    override val kotlinOrigin: KtClassOrObject? = null
-
-    override val originKind: LightClassOriginKind = LightClassOriginKind.SOURCE
-}
\ No newline at end of file
+}
diff --git a/compiler/light-classes/src/org/jetbrains/kotlin/asJava/classes/ultraLightClassForScript.kt b/compiler/light-classes/src/org/jetbrains/kotlin/asJava/classes/ultraLightClassForScript.kt
index f7e78ab58c51..c0b182175629 100644
--- a/compiler/light-classes/src/org/jetbrains/kotlin/asJava/classes/ultraLightClassForScript.kt
+++ b/compiler/light-classes/src/org/jetbrains/kotlin/asJava/classes/ultraLightClassForScript.kt
@@ -24,7 +24,7 @@ import org.jetbrains.kotlin.psi.KtScript
 class KtUltraLightClassForScript(
     script: KtScript,
     private val support: KtUltraLightSupport,
-) : KtLightClassForScript(script) {
+) : KtLightClassForScriptBase(script) {
     private val membersBuilder by lazyPub {
         UltraLightMembersCreator(
             containingClass = this,
@@ -139,4 +139,4 @@ class KtUltraLightClassForScript(
             .filter { it.name != null }
             .mapNotNull(KtClassOrObject::toLightClass)
     }
-}
\ No newline at end of file
+}

