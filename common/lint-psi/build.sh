#!/usr/bin/env bash
set -eu

# This file builds and assembles Lint's dependencies (IntelliJ/Kotlin/UAST).
# Consult the README for details.

# These versions should generally be updated to match what we use in Android Studio.
# For the IntelliJ version, see tools/idea/build.txt.
# For the Kotlin version, see prebuilts/tools/common/kotlin-plugin/Kotlin/kotlinc/build.txt.
# The git SHAs must also be updated to match the versions specified.
export INTELLIJ_VERSION="212.5457.46"
export KOTLIN_VERSION="1.6.10"
export INTELLIJ_SHA="ba104b20a36f29e8303a7e8ce29ea09e232db72c" # IntelliJ branch kt-212-1.6.0 (after the Kotlin 1.6.10 release).
export KOTLIN_SHA="1b49105c78c566ec42b422cbd46782b47a0d9f40" # Kotlin compiler tag v1.6.10.

export CLEAN_BUILD="${CLEAN_BUILD:-false}"

export WORKSPACE="$(bazel info workspace)"
export LINT_PSI_DIR="$WORKSPACE/prebuilts/tools/common/lint-psi"
export KOTLIN_DIR="$LINT_PSI_DIR/dependency-source-checkouts/kotlin"
export INTELLIJ_DIR="$LINT_PSI_DIR/dependency-source-checkouts/intellij"

# Tip: if you want to build with your own fork of IntelliJ or Kotlin,
# you can replace the following git remotes with local directories. Then update
# the corresponding SHA to point to the commit you want---or better yet point to
# a branch name so that the build will track your local work. The build will
# still happen under the dependency-source-checkouts directory---but the sources
# will be copied over from your forked repo.
# Example:
#   KOTLIN_REMOTE="file:///absolute/path/to/forked/kotlin/repo"
#   KOTLIN_SHA="my-dev-branch"
INTELLIJ_REMOTE="git@github.com:JetBrains/intellij-community.git"
KOTLIN_REMOTE="git@github.com:JetBrains/kotlin.git"

phase() {
    echo -e "\n=== $1 ===\n"
}

fetch_git_repo() {
    local DIR="$1"; local REMOTE="$2"; local REF="$3"
    phase "Fetching $REF from $REMOTE"
    git init "$DIR"
    git -C "$DIR" fetch --filter=blob:none "$REMOTE" "$REF"
    git -C "$DIR" checkout -f FETCH_HEAD
    git -C "$DIR" clean -fd
}

cd "$WORKSPACE"

fetch_git_repo "$INTELLIJ_DIR" "$INTELLIJ_REMOTE" "$INTELLIJ_SHA"
fetch_git_repo "$KOTLIN_DIR" "$KOTLIN_REMOTE" "$KOTLIN_SHA"

GRADLE_CLEAN_FLAGS=()
if [[ "$CLEAN_BUILD" = "true" ]]; then
    phase "Cleaning outputs"
    rm -rf "$LINT_PSI_DIR/build"
    git -C "$KOTLIN_DIR" clean -fdx
    git -C "$INTELLIJ_DIR" clean -fdx
    GRADLE_CLEAN_FLAGS+=(clean --no-daemon --no-build-cache)
fi

phase "Applying Lint patches"
git -C "$KOTLIN_DIR" apply "$LINT_PSI_DIR/kotlin-compiler-patch.diff"
git -C "$INTELLIJ_DIR" apply "$LINT_PSI_DIR/kotlin-plugin-patch.diff"

phase "Building Kotlin compiler"
# This command is inspired by JetBrains/intellij-community/.idea/runConfigurations/Publish_compiler_for_ide_jars.xml
# which is itself generated by JetBrains/intellij-community/plugins/kotlin/util/project-model-updater.
# Note: the Kotlin compiler will auto-detect installed JDKs that can be used for building.
# We use -Pkotlin.build.isObsoleteJdkOverrideEnabled=true to avoid the need for JDK 1.6.
# We use -Dorg.gradle.dependency.verification=off because the build otherwise fails (if outside JetBrains CI environment?)
# We use -Pkotlin.build.jar.compression=true to ensure reasonable jar sizes.
# Additional options to investigate: isTeamcityBuild, kotlin.build.proguard, BuildPropertiesExt.kt, etc.
"$KOTLIN_DIR/gradlew" -p "$KOTLIN_DIR" \
    "${GRADLE_CLEAN_FLAGS[@]}" \
    publishIdeArtifacts \
    -PdeployVersion="$KOTLIN_VERSION-for-lint" \
    -Ppublish.ide.plugin.dependencies=true \
    -Pkotlin.build.isObsoleteJdkOverrideEnabled=true \
    -Pkotlin.build.jar.compression=true \
    -Dorg.gradle.dependency.verification=off

phase "Building Lint dependency jars"
"$WORKSPACE/tools/gradlew" -p "$LINT_PSI_DIR" "${GRADLE_CLEAN_FLAGS[@]}" assemble

phase "Copying artifacts to prebuilts"
cp "$LINT_PSI_DIR"/build/libs/intellij-core{,-sources}.jar "$LINT_PSI_DIR/intellij-core/"
cp "$LINT_PSI_DIR"/build/libs/kotlin-compiler{,-sources}.jar "$LINT_PSI_DIR/kotlin-compiler/"
cp "$LINT_PSI_DIR"/build/libs/uast-{common,java,kotlin}{,-sources}.jar "$LINT_PSI_DIR/uast/"
cp "$LINT_PSI_DIR"/build/versions.txt "$LINT_PSI_DIR/"

phase "Done"
