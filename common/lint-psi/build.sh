#!/usr/bin/env bash
set -eu

# This file builds and assembles Lint's dependencies (IntelliJ/Kotlin/UAST).
# Consult the README for details.

# These versions should generally be updated to match what we use in Android Studio.
# For the IntelliJ version, see tools/idea/build.txt.
# For the Kotlin version, see prebuilts/tools/common/kotlin-plugin/Kotlin/kotlinc/build.txt.
# The git SHAs must also be updated to match the versions specified.
export INTELLIJ_VERSION="222.3345.118"
export KOTLIN_VERSION="1.7.20"
export INTELLIJ_SHA="e5cbd47ca631fca606901f397ce290c5d77c125a" # Sep 21, 2022, kt-222-1.7.20
export KOTLIN_SHA="7159702d253166e43f15736f3dfb81bcad68f4a4" # v1.7.20, Sep 26, 2022, 1.7.20 branch

export CLEAN_BUILD="${CLEAN_BUILD:-false}"

export WORKSPACE="$(bazel info workspace)"
export LINT_PSI_DIR="$WORKSPACE/prebuilts/tools/common/lint-psi"
export KOTLIN_DIR="${CUSTOM_KOTLIN_DIR:-$LINT_PSI_DIR/dependency-source-checkouts/kotlin}"
export INTELLIJ_DIR="${CUSTOM_INTELLIJ_DIR:-$LINT_PSI_DIR/dependency-source-checkouts/intellij}"

INTELLIJ_REMOTE="git@github.com:JetBrains/intellij-community.git"
KOTLIN_REMOTE="git@github.com:JetBrains/kotlin.git"

phase() {
    echo -e "\n=== $1 ===\n"
}

fetch_git_repo() {
    local DIR="$1"; local REMOTE="$2"; local REF="$3"
    git init "$DIR"
    git -C "$DIR" fetch --filter=blob:none "$REMOTE" "$REF"
    git -C "$DIR" checkout -f FETCH_HEAD
    git -C "$DIR" clean -fd
}

cd "$WORKSPACE"

# Forbid clean builds with custom repos, to avoid clobbering user files.
if [[ "$CLEAN_BUILD" = "true" && ( "${CUSTOM_KOTLIN_DIR:-}" || "${CUSTOM_INTELLIJ_DIR:-}" ) ]]; then
    echo "ERROR: clean builds are not supported when using custom dependency repositories"
    exit 1
fi

phase "Fetching dependency sources if needed"
if [[ ! "${CUSTOM_KOTLIN_DIR:-}" ]]; then fetch_git_repo "$KOTLIN_DIR" "$KOTLIN_REMOTE" "$KOTLIN_SHA"; fi
if [[ ! "${CUSTOM_INTELLIJ_DIR:-}" ]]; then fetch_git_repo "$INTELLIJ_DIR" "$INTELLIJ_REMOTE" "$INTELLIJ_SHA"; fi

GRADLE_CLEAN_FLAGS=()
if [[ "$CLEAN_BUILD" = "true" ]]; then
    phase "Cleaning outputs"
    rm -rf "$LINT_PSI_DIR/build"
    git -C "$KOTLIN_DIR" clean -fdx
    git -C "$INTELLIJ_DIR" clean -fdx
    GRADLE_CLEAN_FLAGS+=(clean --no-daemon --no-build-cache)
fi

phase "Applying patches if needed"
if [[ ! "${CUSTOM_KOTLIN_DIR:-}" ]]; then
    git -C "$KOTLIN_DIR" apply -v "$LINT_PSI_DIR/kotlin-compiler-patch.diff"
fi
if [[ ! "${CUSTOM_INTELLIJ_DIR:-}" ]]; then
    git -C "$INTELLIJ_DIR" apply -v "$LINT_PSI_DIR/intellij-safe-analyze.diff"
    git -C "$INTELLIJ_DIR" apply -v "$LINT_PSI_DIR/intellij-ba5ddce2cc.diff"
fi

phase "Building Kotlin compiler"
# This command is inspired by JetBrains/intellij-community/.idea/runConfigurations/Publish_compiler_for_ide_jars.xml
# which is itself generated by JetBrains/intellij-community/plugins/kotlin/util/project-model-updater.
# Note: the Kotlin compiler will auto-detect installed JDKs that can be used for building.
# We use -Pkotlin.build.isObsoleteJdkOverrideEnabled=true to avoid the need for JDK 1.6.
# We use -Dorg.gradle.dependency.verification=off because the build otherwise fails (if outside JetBrains CI environment?)
# We use -Pkotlin.build.jar.compression=true to ensure reasonable jar sizes.
# Additional options to investigate: isTeamcityBuild, kotlin.build.proguard, BuildPropertiesExt.kt, etc.
"$KOTLIN_DIR/gradlew" -p "$KOTLIN_DIR" \
    "${GRADLE_CLEAN_FLAGS[@]}" \
    publishIdeArtifacts \
    -PdeployVersion="$KOTLIN_VERSION-for-lint" \
    -Ppublish.ide.plugin.dependencies=true \
    -Pkotlin.build.isObsoleteJdkOverrideEnabled=true \
    -Pkotlin.build.jar.compression=true \
    -Dorg.gradle.dependency.verification=off

phase "Building Lint dependency jars"
"$WORKSPACE/tools/gradlew" -p "$LINT_PSI_DIR" "${GRADLE_CLEAN_FLAGS[@]}" assemble

phase "Copying artifacts to prebuilts"
cp "$LINT_PSI_DIR"/build/libs/intellij-core{,-sources}.jar "$LINT_PSI_DIR/intellij-core/"
cp "$LINT_PSI_DIR"/build/libs/kotlin-compiler{,-sources}.jar "$LINT_PSI_DIR/kotlin-compiler/"
cp "$LINT_PSI_DIR"/build/libs/uast-{common,java,kotlin}{,-sources}.jar "$LINT_PSI_DIR/uast/"
cp "$LINT_PSI_DIR"/build/versions.txt "$LINT_PSI_DIR/"

phase "Done"
