diff --git a/plugins/kotlin/frontend-independent/src/org/jetbrains/kotlin/idea/references/ReadWriteAccessChecker.kt b/plugins/kotlin/frontend-independent/src/org/jetbrains/kotlin/idea/references/ReadWriteAccessChecker.kt
index ccd20a5b3eb3..72f964c3f80d 100644
--- a/plugins/kotlin/frontend-independent/src/org/jetbrains/kotlin/idea/references/ReadWriteAccessChecker.kt
+++ b/plugins/kotlin/frontend-independent/src/org/jetbrains/kotlin/idea/references/ReadWriteAccessChecker.kt
@@ -3,22 +3,46 @@
 package org.jetbrains.kotlin.idea.references
 
 import com.intellij.openapi.components.service
-import org.jetbrains.kotlin.psi.KtBinaryExpression
-import org.jetbrains.kotlin.psi.KtExpression
+import org.jetbrains.kotlin.lexer.KtTokens
+import org.jetbrains.kotlin.psi.*
+import org.jetbrains.kotlin.psi.psiUtil.getAssignmentByLHS
+import org.jetbrains.kotlin.psi.psiUtil.getQualifiedExpressionForSelectorOrThis
 import org.jetbrains.kotlin.resolve.references.ReferenceAccess
+import org.jetbrains.kotlin.utils.addToStdlib.constant
 
 interface ReadWriteAccessChecker {
     fun readWriteAccessWithFullExpressionByResolve(assignment: KtBinaryExpression): Pair<ReferenceAccess, KtExpression>?
 
-    @Suppress("DEPRECATION")
     fun readWriteAccessWithFullExpression(
         targetExpression: KtExpression,
         useResolveForReadWrite: Boolean
-    ): Pair<ReferenceAccess, KtExpression> =
-        if (useResolveForReadWrite)
-            targetExpression.readWriteAccessWithFullExpressionWithPossibleResolve(::readWriteAccessWithFullExpressionByResolve)
+    ): Pair<ReferenceAccess, KtExpression> {
+        var expression = targetExpression.getQualifiedExpressionForSelectorOrThis()
+        loop@ while (true) {
+            when (val parent = expression.parent) {
+                is KtParenthesizedExpression, is KtAnnotatedExpression, is KtLabeledExpression -> expression = parent as KtExpression
+                else -> break@loop
+            }
+        }
+
+        val assignment = expression.getAssignmentByLHS()
+        if (assignment != null) {
+            return when (assignment.operationToken) {
+                KtTokens.EQ -> ReferenceAccess.WRITE to assignment
+
+                else -> {
+                    (if (useResolveForReadWrite) readWriteAccessWithFullExpressionByResolve(assignment) else null)
+                        ?: (ReferenceAccess.READ_WRITE to assignment)
+                }
+            }
+        }
+
+        val unaryExpression = expression.parent as? KtUnaryExpression
+        return if (unaryExpression != null && unaryExpression.operationToken in constant { setOf(KtTokens.PLUSPLUS, KtTokens.MINUSMINUS) })
+            ReferenceAccess.READ_WRITE to unaryExpression
         else
-            targetExpression.readWriteAccessWithFullExpressionWithPossibleResolve(readWriteAccessWithFullExpressionByResolve = { null })
+            ReferenceAccess.READ to expression
+    }
 
     companion object {
         fun getInstance(): ReadWriteAccessChecker = service()
diff --git a/plugins/kotlin/uast/uast-kotlin-base/kotlin.uast.uast-kotlin-base.iml b/plugins/kotlin/uast/uast-kotlin-base/kotlin.uast.uast-kotlin-base.iml
index 7915d756310c..29fc38289f66 100644
--- a/plugins/kotlin/uast/uast-kotlin-base/kotlin.uast.uast-kotlin-base.iml
+++ b/plugins/kotlin/uast/uast-kotlin-base/kotlin.uast.uast-kotlin-base.iml
@@ -31,7 +31,6 @@
     <orderEntry type="module" module-name="intellij.java.psi.impl" />
     <orderEntry type="module" module-name="intellij.java.rt" scope="TEST" />
     <orderEntry type="module" module-name="intellij.java.uast" />
-    <orderEntry type="module" module-name="kotlin.fir.frontend-independent" />
     <orderEntry type="library" scope="TEST" name="kotlin-test" level="project" />
     <orderEntry type="module" module-name="intellij.platform.uast.tests" scope="TEST" />
     <orderEntry type="module" module-name="kotlin.tests-common" scope="TEST" />
diff --git a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
index 0fc76ff68940..dcb63f17b121 100644
--- a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
+++ b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/expressions/KotlinUSimpleReferenceExpression.kt
@@ -7,7 +7,6 @@ package org.jetbrains.uast.kotlin
 
 import com.intellij.openapi.util.Key
 import com.intellij.psi.*
-import org.jetbrains.kotlin.idea.references.readWriteAccess
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.psi.psiUtil.findAssignment
 import org.jetbrains.uast.*
@@ -49,7 +48,7 @@ class KotlinUSimpleReferenceExpression(
     private fun visitAccessorCalls(visitor: UastVisitor) {
         // Visit Kotlin get-set synthetic Java property calls as function calls
         val resolvedMethod = baseResolveProviderService.resolveAccessorCall(sourcePsi) ?: return
-        val access = sourcePsi.readWriteAccess(useResolveForReadWrite = false)
+        val access = sourcePsi.readWriteAccess()
         val setterValue = if (access.isWrite) {
             findAssignment(sourcePsi)?.right ?: run {
                 visitor.afterVisitSimpleNameReferenceExpression(this)
diff --git a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/baseKotlinInternalUastUtils.kt b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/baseKotlinInternalUastUtils.kt
index 34c0563b2e6c..901c7c080c43 100644
--- a/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/baseKotlinInternalUastUtils.kt
+++ b/plugins/kotlin/uast/uast-kotlin-base/src/org/jetbrains/uast/kotlin/internal/baseKotlinInternalUastUtils.kt
@@ -12,13 +12,14 @@ import org.jetbrains.kotlin.asJava.findFacadeClass
 import org.jetbrains.kotlin.asJava.getAccessorLightMethods
 import org.jetbrains.kotlin.asJava.toLightClass
 import org.jetbrains.kotlin.asJava.toLightElements
-import org.jetbrains.kotlin.idea.references.readWriteAccess
+import org.jetbrains.kotlin.idea.KotlinLanguage
+import org.jetbrains.kotlin.lexer.KtTokens
 import org.jetbrains.kotlin.name.FqName
 import org.jetbrains.kotlin.psi.*
-import org.jetbrains.kotlin.psi.psiUtil.containingClassOrObject
-import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
-import org.jetbrains.kotlin.psi.psiUtil.parents
+import org.jetbrains.kotlin.psi.psiUtil.*
 import org.jetbrains.kotlin.resolve.ArrayFqNames
+import org.jetbrains.kotlin.resolve.references.ReferenceAccess
+import org.jetbrains.kotlin.utils.addToStdlib.constant
 import org.jetbrains.uast.*
 
 @Suppress("NOTHING_TO_INLINE")
@@ -53,6 +54,30 @@ fun KtExpression.unwrapBlockOrParenthesis(): KtExpression {
     return innerExpression
 }
 
+fun KtExpression.readWriteAccess(): ReferenceAccess {
+    var expression = getQualifiedExpressionForSelectorOrThis()
+    loop@ while (true) {
+        val parent = expression.parent
+        when (parent) {
+            is KtParenthesizedExpression, is KtAnnotatedExpression, is KtLabeledExpression -> expression = parent as KtExpression
+            else -> break@loop
+        }
+    }
+
+    val assignment = expression.getAssignmentByLHS()
+    if (assignment != null) {
+        return when (assignment.operationToken) {
+            KtTokens.EQ -> ReferenceAccess.WRITE
+            else -> ReferenceAccess.READ_WRITE
+        }
+    }
+
+    return if ((expression.parent as? KtUnaryExpression)?.operationToken in constant { setOf(KtTokens.PLUSPLUS, KtTokens.MINUSMINUS) })
+        ReferenceAccess.READ_WRITE
+    else
+        ReferenceAccess.READ
+}
+
 fun KtElement.canAnalyze(): Boolean {
     if (!isValid) return false
     val containingFile = containingFile as? KtFile ?: return false // EA-114080, EA-113475, EA-134193
@@ -77,7 +102,7 @@ fun KtClassOrObject.toPsiType(): PsiType {
 }
 
 fun PsiElement.getMaybeLightElement(sourcePsi: KtExpression? = null): PsiElement? {
-    if (this is KtProperty && sourcePsi?.readWriteAccess(useResolveForReadWrite = false)?.isWrite == true) {
+    if (this is KtProperty && sourcePsi?.readWriteAccess()?.isWrite == true) {
         with(getAccessorLightMethods()) {
             (setter ?: backingField)?.let { return it } // backingField is for val property assignments in init blocks
         }
diff --git a/plugins/kotlin/uast/uast-kotlin/kotlin.uast.uast-kotlin.iml b/plugins/kotlin/uast/uast-kotlin/kotlin.uast.uast-kotlin.iml
index 456fba191ebe..e7963028709e 100644
--- a/plugins/kotlin/uast/uast-kotlin/kotlin.uast.uast-kotlin.iml
+++ b/plugins/kotlin/uast/uast-kotlin/kotlin.uast.uast-kotlin.iml
@@ -13,7 +13,7 @@
     <orderEntry type="library" name="kotlinc.kotlin-compiler-common" level="project" />
     <orderEntry type="library" name="kotlinc.kotlin-compiler-fe10" level="project" />
     <orderEntry type="library" name="kotlinc.kotlin-compiler-ir" level="project" />
-    <orderEntry type="module" module-name="kotlin.fir.frontend-independent" />
+    <orderEntry type="module" module-name="kotlin.fir.frontend-independent" scope="TEST" />
     <orderEntry type="module" module-name="intellij.platform.uast" />
     <orderEntry type="module" module-name="intellij.java.psi.impl" />
     <orderEntry type="module" module-name="intellij.java.uast" />
@@ -25,4 +25,4 @@
     <orderEntry type="module" module-name="kotlin.uast.uast-kotlin-base" />
     <orderEntry type="module" module-name="kotlin.uast.uast-kotlin-idea" scope="RUNTIME" />
   </component>
-</module>
\ No newline at end of file
+</module>
diff --git a/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt b/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
index 4b32cb0d0150..07689a69e28a 100644
--- a/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
+++ b/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/KotlinUastResolveProviderService.kt
@@ -8,7 +8,6 @@ import org.jetbrains.kotlin.builtins.createFunctionType
 import org.jetbrains.kotlin.codegen.state.KotlinTypeMapper
 import org.jetbrains.kotlin.config.LanguageVersionSettings
 import org.jetbrains.kotlin.descriptors.*
-import org.jetbrains.kotlin.idea.references.readWriteAccess
 import org.jetbrains.kotlin.name.FqNameUnsafe
 import org.jetbrains.kotlin.psi.*
 import org.jetbrains.kotlin.psi.psiUtil.getParentOfType
@@ -171,7 +170,7 @@ interface KotlinUastResolveProviderService : BaseKotlinUastResolveProviderServic
     override fun resolveAccessorCall(ktSimpleNameExpression: KtSimpleNameExpression): PsiMethod? {
         val resolvedCall = ktSimpleNameExpression.getResolvedCall(ktSimpleNameExpression.analyze()) ?: return null
         val resultingDescriptor = resolvedCall.resultingDescriptor as? SyntheticJavaPropertyDescriptor ?: return null
-        val access = ktSimpleNameExpression.readWriteAccess(useResolveForReadWrite = false)
+        val access = ktSimpleNameExpression.readWriteAccess()
         val descriptor = (if (access.isWrite) resultingDescriptor.setMethod else resultingDescriptor.getMethod) ?: return null
         return resolveToPsiMethod(ktSimpleNameExpression, descriptor)
     }
diff --git a/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt b/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
index d12da09b1684..4394fe2d42d7 100644
--- a/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
+++ b/plugins/kotlin/uast/uast-kotlin/src/org/jetbrains/uast/kotlin/internal/kotlinInternalUastUtils.kt
@@ -24,7 +24,6 @@ import org.jetbrains.kotlin.descriptors.impl.EnumEntrySyntheticClassDescriptor
 import org.jetbrains.kotlin.descriptors.impl.TypeAliasConstructorDescriptor
 import org.jetbrains.kotlin.descriptors.synthetic.SyntheticMemberDescriptor
 import org.jetbrains.kotlin.idea.KotlinLanguage
-import org.jetbrains.kotlin.idea.references.readWriteAccess
 import org.jetbrains.kotlin.load.java.lazy.descriptors.LazyJavaPackageFragment
 import org.jetbrains.kotlin.load.java.sam.SamAdapterDescriptor
 import org.jetbrains.kotlin.load.kotlin.KotlinJvmBinaryPackageSourceElement
@@ -356,7 +355,7 @@ fun resolveToDeclarationImpl(sourcePsi: KtExpression, declarationDescriptor: Dec
         declarationDescriptor = declarationDescriptor.callableFromObject
     }
     if (declarationDescriptor is SyntheticJavaPropertyDescriptor) {
-        declarationDescriptor = when (sourcePsi.readWriteAccess(useResolveForReadWrite = false)) {
+        declarationDescriptor = when (sourcePsi.readWriteAccess()) {
             ReferenceAccess.WRITE, ReferenceAccess.READ_WRITE ->
                 declarationDescriptor.setMethod ?: declarationDescriptor.getMethod
             ReferenceAccess.READ -> declarationDescriptor.getMethod
@@ -394,7 +393,7 @@ fun resolveToDeclarationImpl(sourcePsi: KtExpression, declarationDescriptor: Dec
             ?.let { return it }
     }
 
-    resolveDeserialized(sourcePsi, declarationDescriptor, sourcePsi.readWriteAccess(useResolveForReadWrite = false))?.let { return it }
+    resolveDeserialized(sourcePsi, declarationDescriptor, sourcePsi.readWriteAccess())?.let { return it }
 
     return null
 }
diff --git a/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/AbstractKotlinUastTest.kt b/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/AbstractKotlinUastTest.kt
index 56cb8b103f81..2d168759d9af 100644
--- a/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/AbstractKotlinUastTest.kt
+++ b/plugins/kotlin/uast/uast-kotlin/tests/test/org/jetbrains/uast/test/kotlin/AbstractKotlinUastTest.kt
@@ -22,8 +22,6 @@ import org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM
 import org.jetbrains.kotlin.cli.jvm.plugins.PluginCliParser
 import org.jetbrains.kotlin.config.*
 import org.jetbrains.kotlin.idea.artifacts.KotlinArtifacts
-import org.jetbrains.kotlin.idea.references.ReadWriteAccessChecker
-import org.jetbrains.kotlin.idea.references.ReadWriteAccessCheckerDescriptorsImpl
 import org.jetbrains.kotlin.parsing.KotlinParserDefinition
 import org.jetbrains.kotlin.resolve.jvm.extensions.AnalysisHandlerExtension
 import org.jetbrains.kotlin.idea.test.ConfigurationKind
@@ -104,10 +102,6 @@ abstract class AbstractKotlinUastTest : AbstractUastTest() {
             BaseKotlinUastResolveProviderService::class.java,
             CliKotlinUastResolveProviderService::class.java
         )
-        application.registerService(
-            ReadWriteAccessChecker::class.java,
-            ReadWriteAccessCheckerDescriptorsImpl::class.java
-        )
         project.registerService(
             KotlinUastResolveProviderService::class.java,
             CliKotlinUastResolveProviderService::class.java
