diff --git a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/analysis/providers/PsiDeclarationAndKtSymbolEqualityChecker.kt b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/analysis/providers/PsiDeclarationAndKtSymbolEqualityChecker.kt
index 1913665003df..dee5f63014e1 100644
--- a/analysis/symbol-light-classes/src/org/jetbrains/kotlin/analysis/providers/PsiDeclarationAndKtSymbolEqualityChecker.kt
+++ b/analysis/symbol-light-classes/src/org/jetbrains/kotlin/analysis/providers/PsiDeclarationAndKtSymbolEqualityChecker.kt
@@ -29,7 +29,7 @@ internal object PsiDeclarationAndKtSymbolEqualityChecker {
     }
 
     private fun KtAnalysisSession.returnTypesMatch(psi: PsiMethod, symbol: KtCallableSymbol): Boolean {
-        if (symbol is KtConstructorSymbol) return true
+        if (symbol is KtConstructorSymbol) return psi.isConstructor
         return psi.returnType?.let {
             isTheSameTypes(
                 psi,
@@ -41,6 +41,8 @@ internal object PsiDeclarationAndKtSymbolEqualityChecker {
     }
 
     private fun typeParametersMatch(psi: PsiMethod, symbol: KtCallableSymbol): Boolean {
+        // PsiMethod for constructor won't have type parameters
+        if (symbol is KtConstructorSymbol) return psi.isConstructor
         if (psi.typeParameters.size != symbol.typeParameters.size) return false
         psi.typeParameters.zip(symbol.typeParameters) { psiTypeParameter, typeParameterSymbol ->
             if (psiTypeParameter.name != typeParameterSymbol.name.asString()) return false
diff --git a/analysis/analysis-api-fir/src/org/jetbrains/kotlin/analysis/api/fir/components/KtFirCallResolver.kt b/analysis/analysis-api-fir/src/org/jetbrains/kotlin/analysis/api/fir/components/KtFirCallResolver.kt
index ec76e64b8007b..66eaf9d0a59b3 100644
--- a/analysis/analysis-api-fir/src/org/jetbrains/kotlin/analysis/api/fir/components/KtFirCallResolver.kt
+++ b/analysis/analysis-api-fir/src/org/jetbrains/kotlin/analysis/api/fir/components/KtFirCallResolver.kt
@@ -33,6 +33,7 @@ import org.jetbrains.kotlin.analysis.utils.errors.withPsiEntry
 import org.jetbrains.kotlin.analysis.utils.printer.parentOfType
 import org.jetbrains.kotlin.fir.FirElement
 import org.jetbrains.kotlin.fir.analysis.checkers.toRegularClassSymbol
+import org.jetbrains.kotlin.fir.collectUpperBounds
 import org.jetbrains.kotlin.fir.declarations.FirResolvePhase
 import org.jetbrains.kotlin.fir.declarations.FirValueParameter
 import org.jetbrains.kotlin.fir.declarations.fullyExpandedClass
@@ -1241,10 +1242,19 @@ internal class KtFirCallResolver(
             FirOperation.EQ, FirOperation.NOT_EQ -> {
                 val leftOperand = arguments.firstOrNull() ?: return null
                 val session = analysisSession.useSiteSession
-                val leftOperandType = leftOperand.resolvedType
-
-                val classSymbol = leftOperandType.fullyExpandedType(session).toSymbol(session) as? FirClassSymbol<*>
-                val equalsSymbol = classSymbol?.getEqualsSymbol() ?: equalsSymbolInAny ?: return null
+                val leftOperandType = leftOperand.resolvedType.fullyExpandedType(session).upperBoundIfFlexible()
+                val equalsSymbol = when (leftOperandType) {
+                    is ConeTypeParameterType -> {
+                        leftOperandType.collectUpperBounds().firstNotNullOfOrNull { upperBound ->
+                            val upperBoundClassSymbol = upperBound.toSymbol(session) as? FirClassSymbol<*>
+                            upperBoundClassSymbol?.getEqualsSymbol()
+                        }
+                    }
+                    else -> {
+                        val classSymbol = leftOperandType.toSymbol(session) as? FirClassSymbol<*>
+                        classSymbol?.getEqualsSymbol()
+                    }
+                } ?: equalsSymbolInAny ?: return null
                 val ktSignature = equalsSymbol.toKtSignature()
                 KtSuccessCallInfo(
                     KtSimpleFunctionCall(
